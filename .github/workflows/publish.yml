---
# Based on https://github.com/nicolas-van/rust-cross-compile-example - Thanks!

name: Publish

on:
  release:
    types:
      - published
  workflow_dispatch:
  pull_request: # for testing, when we change the workflow
    branches:
      - main
    paths:
      - .github/workflows/publish.yml

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu # tested in a debian container on a mac
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
          #  OS: ubuntu-latest

          - TARGET: aarch64-unknown-linux-gnu # tested on aws t4g.nano
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
          #  OS: ubuntu-latest

          - TARGET: armv7-unknown-linux-gnueabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
          #  OS: ubuntu-latest

          - TARGET: arm-unknown-linux-gnueabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
          #  OS: ubuntu-latest

          - TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest

          - target: aarch64-apple-darwin
            OS: macos-latest

          - TARGET: x86_64-pc-windows-msvc
            OS: windows-latest

          - TARGET: x86_64-pc-windows-gnu
            OS: windows-latest

          - TARGET: i686-pc-windows-msvc
            OS: windows-latest

          - TARGET: i686-unknown-linux-gnu
            OS: ubuntu-latest

    runs-on: ${{ matrix.OS }}
    env:
      NAME: cfn-teleport
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Dependency cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: ${{ runner.os }}-${{ matrix.TARGET }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.TARGET }}-target-

      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ "${OS}" =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          fi

          if [[ "${TARGET}" =~ ^.*-musl(eabihf?)$ ]]; then
            sudo apt-get install musl-tools
          fi

          if [[ "${TARGET}" == "i686-unknown-linux-gnu" ]]; then
            sudo apt-get install gcc-multilib
          fi

      - name: Install rust target
        run: rustup target add "${TARGET}"

      - name: Run build
        run: cargo build --release --verbose --target "${TARGET}"

      - name: List target
        run: find ./target

      - name: Compress
        id: compress
        run: |
          mkdir -p ./artifacts

          VERSION="${GITHUB_REF_NAME}"
          if ! [[ "${VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION="v9.9.9"
          fi

          if [[ $OS =~ ^windows.*$ ]]; then
              SRC=$NAME.exe
              ARTIFACT="./artifacts/${NAME}-${TARGET}-${VERSION}.exe"
          elif [[ $OS =~ ^macos.*$ ]]; then
              SRC=$NAME
              ARTIFACT="./artifacts/${NAME}-${TARGET}-${VERSION}.dmg"
          else
              SRC=$NAME
              ARTIFACT="./artifacts/${NAME}-${TARGET}-${VERSION}.tar.gz"
          fi

          mv "./target/$TARGET/release/${SRC}" "./${SRC}"

          if [[ $OS =~ ^windows.*$ ]]; then
              # there is no reduction in size for the exe
              # tar.exe -a -c -f "${ARTIFACT}" "${SRC}"
              mv "./${SRC}" "${ARTIFACT}"
          elif [[ $OS =~ ^macos.*$ ]]; then
              mkdir -p dmg
              cp "./${SRC}" dmg
              hdiutil create cfn-teleport.dmg -ov -volname "cfn-teleport" -fs HFS+ -srcfolder "dmg"
              hdiutil convert cfn-teleport.dmg -format UDZO -o "${ARTIFACT}"
          else
              tar -czf "${ARTIFACT}" "${SRC}"
          fi

          if [[ ! $OS =~ ^windows.*$ ]]; then
            ls -lh "${SRC}" "${ARTIFACT}"
          fi

          echo "ARTIFACT=${ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            ./artifacts

      - name: Attach artifact to release
        run: |
          if [[ "${GH_EVENT}" != "pull_request" ]]; then
            gh release upload "${GITHUB_REF_NAME}" "${ARTIFACT}"
          else
            echo "Not uploading artifact to release because this is a pull request"
            ls -l "${ARTIFACT}"
          fi
        env:
          GH_TOKEN: ${{ secrets.OVERRIDE_TOKEN }}
          GH_EVENT: ${{ github.event_name }}
          ARTIFACT: ${{ steps.compress.outputs.ARTIFACT }}

  cargo-publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Dependency cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: ubuntu-latest-x86_64-unknown-linux-gnu-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-x86_64-unknown-linux-gnu-target-

      - name: Publish to crates.io
        run: |
          if [[ "${GH_EVENT}" != "pull_request" ]]; then
            cargo publish
          else
            cargo publish --dry-run
          fi
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          GH_EVENT: ${{ github.event_name }}

  homebrew-publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: udondan/homebrew-software
          token: ${{ secrets.OVERRIDE_TOKEN }}

      - uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts

      - name: Update homebrew formula
        run: |
          VERSION="${GITHUB_REF_NAME}"
          if ! [[ "${VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION="v9.9.9"
          fi

          ARM=($(shasum -a 256 artifacts/cfn-teleport-aarch64-apple-darwin-${VERSION}.dmg))
          INTEL=($(shasum -a 256 artifacts/cfn-teleport-x86_64-apple-darwin-${VERSION}.dmg))

          echo "${TEMPLATE}" | sed \
            -e "s!{{ version }}!${VERSION:1}!g" \
            -e "s!{{ intel_file }}!$(basename ${INTEL[1]})!g" \
            -e "s!{{ intel_sha }}!${INTEL[0]}!g" \
            -e "s!{{ arm_file }}!$(basename ${ARM[1]})!g" \
            -e "s!{{ arm_sha }}!${ARM[0]}!g" \
            > cfn-teleport.rb
          cat cfn-teleport.rb

          rm -rf artifacts
          git diff
          git add cfn-teleport.rb
          git status
          git config --global user.email "${EMAIL}"
          git config --global user.name "${NAME}"
          git commit -m "Release ${VERSION:1}"

          if [[ "${GH_EVENT}" != "pull_request" ]]; then
            git push
          fi
        env:
          EMAIL: ${{ secrets.EMAIL }}
          NAME: ${{ secrets.NAME }}
          TEMPLATE: |
            # typed: false
            # frozen_string_literal: true

            class CfnTeleport < Formula
              desc "A command line-tool which can move CloudFormation resources between stacks"
              homepage "${{ github.server_url }}/${{ github.repository }}"
              version "{{ version }}"
              license "Apache-2.0"

              if OS.mac? && Hardware::CPU.intel?
                url "${{ github.server_url }}/${{ github.repository }}/releases/download/v{{ version }}/{{ intel_file }}"
                sha256 "{{ intel_sha }}"
              end
              if OS.mac? && Hardware::CPU.arm?
                url "${{ github.server_url }}/${{ github.repository }}/releases/download/v{{ version }}/{{ arm_file }}"
                sha256 "{{ arm_sha }}"
              end

              def install
                bin.install "cfn-teleport"
              end
            end

  aur-publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH and git
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          git config --global user.email "${EMAIL}"
          git config --global user.name "${NAME}"

      - name: Get current PKGBUILD
        run: |
          git clone "ssh://aur@aur.archlinux.org/cfn-teleport.git" --depth=1
          cat PKGBUILD .SRCINFO
