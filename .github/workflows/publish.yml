---
# Based on https://github.com/nicolas-van/rust-cross-compile-example - Thanks!

name: Publish

on:
  release:
    types:
      - published
  workflow_dispatch:
  pull_request: # for testing, when we change the workflow
    branches:
      - main
    files:
      - .github/workflows/publish.yml

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu # tested in a debian container on a mac
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
          #  OS: ubuntu-latest

          - TARGET: aarch64-unknown-linux-gnu # tested on aws t4g.nano
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
          #  OS: ubuntu-latest

          - TARGET: armv7-unknown-linux-gnueabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
          #  OS: ubuntu-latest

          - TARGET: arm-unknown-linux-gnueabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest

          # disabled, because ring package does not support musl
          #- TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
          #  OS: ubuntu-latest

          - TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest

          - target: aarch64-apple-darwin
            OS: macos-latest

          - TARGET: x86_64-pc-windows-msvc
            OS: windows-latest

          - TARGET: x86_64-pc-windows-gnu
            OS: windows-latest

          - TARGET: i686-pc-windows-msvc
            OS: windows-latest

    #
    # TODO:
    # i686-pc-windows-gnu
    # i686-pc-windows-msvc	32-bit MSVC (Windows 7+) 2
    # i686-unknown-linux-gnu	32-bit Linux (kernel 3.2+, glibc 2.17+)

    runs-on: ${{ matrix.OS }}
    env:
      NAME: cfn-teleport
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Dependency cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: ${{ runner.os }}-${{ matrix.TARGET }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.TARGET }}-target-

      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ "${OS}" =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          fi

          if [[ "${TARGET}" =~ ^.*-musl(eabihf?)$ ]]; then
            sudo apt-get install musl-tools
          fi

      - name: Install rust target
        run: rustup target add "${TARGET}"

      - name: Run build
        run: cargo build --release --verbose --target "${TARGET}"

      - name: List target
        run: find ./target

      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          mv "./target/$TARGET/release/${EXEC}" "./${EXEC}"
          VERSION="${GITHUB_REF_NAME}"
          if ! [[ "${VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION="TEST"
          fi
          tar -czf "./artifacts/${NAME}-${TARGET}-${VERSION}.tar.gz" "${EXEC}"
          ls -l ./artifacts "${EXEC}"

      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: result
          path: |
            ./artifacts

      - name: Attach artifact to release
        if: github.event_name != 'pull_request'
        run: |
          gh release upload "${GITHUB_REF_NAME}" "./artifacts/${NAME}-${TARGET}-${GITHUB_REF_NAME}.*"
        env:
          GH_TOKEN: ${{ secrets.OVERRIDE_TOKEN }}
